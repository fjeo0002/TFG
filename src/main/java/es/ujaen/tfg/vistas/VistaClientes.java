/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package es.ujaen.tfg.vistas;

import com.mxrck.autocompleter.TextAutoCompleter;
import es.ujaen.tfg.controlador.ClienteControlador;
import es.ujaen.tfg.modelo.Cliente;
import es.ujaen.tfg.observer.Observador;
import static es.ujaen.tfg.utils.Utils.obtenerIdDeFilaSeleccionada;
import static es.ujaen.tfg.utils.Utils.sufijoPrecios;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jota
 */
public class VistaClientes extends javax.swing.JPanel implements Observador {

    private final ClienteControlador clienteControlador;
    private TextAutoCompleter autoCompleterBuscadorClientes;

    private VistaAnadirModificarCliente vistaAnadirModificarCliente;
    private final JFrame parent;

    private final DefaultTableModel dtm;
    private TableRowSorter<DefaultTableModel> rowSorter;

    /**
     * Creates new form VistaClientes
     *
     * @param parent
     * @param clienteControlador
     */
    public VistaClientes(JFrame parent, ClienteControlador clienteControlador) {
        initComponents();
        this.parent = parent;

        this.clienteControlador = clienteControlador;
        this.clienteControlador.agregarObservador(this);

        this.dtm = (DefaultTableModel) jTable.getModel();

        addTableSelectionListener();
        cargarTablaClientes();
        cargarAutocompletarBuscadorClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelCabecera = new javax.swing.JPanel();
        jPanelTitulo = new javax.swing.JPanel();
        jLabelTitulo = new javax.swing.JLabel();
        jPanelFiltro = new javax.swing.JPanel();
        jLabelBuscarCliente = new javax.swing.JLabel();
        jTextFieldBuscadorClientes = new javax.swing.JTextField();
        jComboBoxEstado = new javax.swing.JComboBox<>();
        jPanelCuerpo = new javax.swing.JPanel();
        jPanelBotonesPrincipales = new javax.swing.JPanel();
        jButtonAnadir = new javax.swing.JButton();
        jButtonModificar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jScrollPaneTabla = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanelCabecera.setToolTipText("");
        jPanelCabecera.setName(""); // NOI18N
        jPanelCabecera.setPreferredSize(new java.awt.Dimension(676, 74));
        jPanelCabecera.setLayout(new java.awt.GridLayout(2, 1));

        jPanelTitulo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabelTitulo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelTitulo.setText("Historial de Clientes");
        jPanelTitulo.add(jLabelTitulo);

        jPanelCabecera.add(jPanelTitulo);

        jPanelFiltro.setLayout(new java.awt.GridBagLayout());

        jLabelBuscarCliente.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabelBuscarCliente.setText("Busca un Cliente por Nombre o Alias:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFiltro.add(jLabelBuscarCliente, gridBagConstraints);

        jTextFieldBuscadorClientes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextFieldBuscadorClientes.setForeground(new java.awt.Color(0, 0, 0));
        jTextFieldBuscadorClientes.setMinimumSize(new java.awt.Dimension(125, 26));
        jTextFieldBuscadorClientes.setPreferredSize(new java.awt.Dimension(125, 26));
        jTextFieldBuscadorClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldBuscadorClientesKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 58;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFiltro.add(jTextFieldBuscadorClientes, gridBagConstraints);

        jComboBoxEstado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBoxEstado.setMaximumRowCount(4);
        jComboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Estado", "Al día", "Debe", "Anticipa" }));
        jComboBoxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEstadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFiltro.add(jComboBoxEstado, gridBagConstraints);

        jPanelCabecera.add(jPanelFiltro);

        add(jPanelCabecera, java.awt.BorderLayout.PAGE_START);

        jPanelCuerpo.setLayout(new javax.swing.BoxLayout(jPanelCuerpo, javax.swing.BoxLayout.Y_AXIS));

        jPanelBotonesPrincipales.setLayout(new java.awt.GridBagLayout());

        jButtonAnadir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonAnadir.setText("Añadir");
        jButtonAnadir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnadirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelBotonesPrincipales.add(jButtonAnadir, gridBagConstraints);

        jButtonModificar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonModificar.setText("Modificar");
        jButtonModificar.setEnabled(false);
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelBotonesPrincipales.add(jButtonModificar, gridBagConstraints);

        jButtonEliminar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.setEnabled(false);
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelBotonesPrincipales.add(jButtonEliminar, gridBagConstraints);

        jPanelCuerpo.add(jPanelBotonesPrincipales);

        jTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Nombre", "Alias", "Estado", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneTabla.setViewportView(jTable);

        jPanelCuerpo.add(jScrollPaneTabla);

        add(jPanelCuerpo, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnadirActionPerformed
        // TODO add your handling code here:
        vistaAnadirModificarCliente = new VistaAnadirModificarCliente(parent, true, null, clienteControlador);
        vistaAnadirModificarCliente.setVisible(true);
    }//GEN-LAST:event_jButtonAnadirActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        // TODO add your handling code here:
        String DNI = obtenerIdDeFilaSeleccionada(jTable, dtm);
        if (DNI != null) {
            Cliente clienteModificado = clienteControlador.leer(DNI);
            if (clienteModificado != null) {
                vistaAnadirModificarCliente = new VistaAnadirModificarCliente(parent, true, clienteModificado, clienteControlador);
                vistaAnadirModificarCliente.setVisible(true);
            }
        }
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
        String DNI = obtenerIdDeFilaSeleccionada(jTable, dtm);
        if (DNI != null) {
            Cliente clienteEliminado = clienteControlador.leer(DNI);
            if (clienteEliminado != null) {
                clienteControlador.borrar(clienteEliminado);
            }
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jTextFieldBuscadorClientesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBuscadorClientesKeyReleased
        // TODO add your handling code here:
        actualizarFiltro();
    }//GEN-LAST:event_jTextFieldBuscadorClientesKeyReleased

    private void jComboBoxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEstadoActionPerformed
        // TODO add your handling code here:
        actualizarFiltro();
    }//GEN-LAST:event_jComboBoxEstadoActionPerformed

    private void addTableSelectionListener() {
        jTable.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jTable.getSelectedRow();
                boolean isRowSelected = selectedRow != -1;
                jButtonModificar.setEnabled(isRowSelected);
                jButtonEliminar.setEnabled(isRowSelected);
            }
        });
    }

    private void cargarTablaClientes() {

        dtm.setRowCount(0); //Limpiar la tabla

        List<Cliente> clientes = clienteControlador.leerTodos();

        if (clientes != null) {
            for (Cliente cliente : clientes) {
                dtm.addRow(new Object[]{
                    cliente.getDNI().trim(), // Columna DNI
                    cliente.getNombre().trim(), // Columna Nombre
                    cliente.getAlias().trim(), // Columna Alias
                    cliente.getEstado(), // Columna Estado
                    cliente.getSaldo().trim() + sufijoPrecios // Columna Saldo
                });
            }
        }
        //Ocultar la columna del DNI
        jTable.getColumnModel().getColumn(0).setMinWidth(0);
        jTable.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable.getColumnModel().getColumn(0).setPreferredWidth(0);

        rowSorter = new TableRowSorter<>(dtm);
        jTable.setRowSorter(rowSorter);
    }

    private void cargarAutocompletarBuscadorClientes() {
        //Iniciamos el Autocompletes con el Buscador de Clientes
        autoCompleterBuscadorClientes = new TextAutoCompleter(jTextFieldBuscadorClientes);

        //Esto hace que también se pueda buscar por en medio del String
        autoCompleterBuscadorClientes.setMode(0);

        List<Cliente> clientes = clienteControlador.leerTodos();

        if (clientes != null) {
            for (Cliente cliente : clientes) {
                autoCompleterBuscadorClientes.addItem(cliente.getNombre());
                autoCompleterBuscadorClientes.addItem(cliente.getAlias());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnadir;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JComboBox<String> jComboBoxEstado;
    private javax.swing.JLabel jLabelBuscarCliente;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JPanel jPanelBotonesPrincipales;
    private javax.swing.JPanel jPanelCabecera;
    private javax.swing.JPanel jPanelCuerpo;
    private javax.swing.JPanel jPanelFiltro;
    private javax.swing.JPanel jPanelTitulo;
    private javax.swing.JScrollPane jScrollPaneTabla;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextFieldBuscadorClientes;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar() {
        cargarTablaClientes();
        actualizarAutocompleter();
    }

    private void actualizarAutocompleter() {
        autoCompleterBuscadorClientes.removeAllItems();
        cargarAutocompletarBuscadorClientes();
    }

    private void actualizarFiltro() {
        String estadoSeleccionado = (String) jComboBoxEstado.getSelectedItem();
        String texto = jTextFieldBuscadorClientes.getText().trim().toLowerCase();

        // Aplicar RowFilter basado en los objetos Cliente
        rowSorter.setRowFilter(new RowFilter<DefaultTableModel, Integer>() {
            @Override
            public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                String DNI = (String) entry.getValue(0); // Obtener DNI de la fila
                Cliente clienteFiltrado = clienteControlador.leer(DNI); // Recuperar el cliente correspondiente

                // Verificar si cliente cumple el filtro por nombre o alias
                String nombre = clienteFiltrado.getNombre().toLowerCase();
                String alias = clienteFiltrado.getAlias().toLowerCase();
                if (!texto.isEmpty() && !(nombre.contains(texto) || alias.contains(texto))) {
                    return false;
                }

                // Verificar si cliente cumple el filtro por estado
                if (estadoSeleccionado != null && !estadoSeleccionado.equals("Estado")) {
                    String estado = clienteFiltrado.getEstado();
                    if (!estado.equals(estadoSeleccionado)) {
                        return false;
                    }
                }

                return true; // Si pasa todos los filtros, incluir la fila
            }
        });
    }
}
