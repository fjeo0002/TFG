/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package es.ujaen.tfg.vistas;

import es.ujaen.tfg.controlador.ClienteControlador;
import es.ujaen.tfg.controlador.FacturaControlador;
import es.ujaen.tfg.modelo.Cliente;
import es.ujaen.tfg.modelo.Factura;
import es.ujaen.tfg.observer.Observador;
import es.ujaen.tfg.utils.ColorCelda;
import static es.ujaen.tfg.utils.Utils.convertirNumeroATextoMes;
import static es.ujaen.tfg.utils.Utils.sufijoPrecios;
import java.awt.Component;
import java.awt.GridLayout;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jota
 */
public class VistaContabilidad extends javax.swing.JPanel implements Observador {

    private final Map<Integer, Map<Integer, String>> celdaFacturaMap;

    private final ClienteControlador clienteControlador;
    private final FacturaControlador facturaControlador;

    private final DefaultTableModel dtm;
    private TableRowSorter<DefaultTableModel> rowSorter;

    /**
     * Creates new form VistaContabilidad
     *
     * @param clienteControlador
     * @param facturaControlador
     */
    public VistaContabilidad(ClienteControlador clienteControlador, FacturaControlador facturaControlador) {
        this.celdaFacturaMap = new HashMap<>();

        this.facturaControlador = facturaControlador;
        this.facturaControlador.agregarObservador(this);

        initComponents();

        this.clienteControlador = clienteControlador;
        this.clienteControlador.agregarObservador(this);

        this.dtm = (DefaultTableModel) jTable.getModel();

        cargarTablaContabilidad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelCabecera = new javax.swing.JPanel();
        jPanelTitulo = new javax.swing.JPanel();
        jLabelTitulo = new javax.swing.JLabel();
        jPanelFiltro = new javax.swing.JPanel();
        jLabelAnio = new javax.swing.JLabel();
        jSpinnerAnio = new javax.swing.JSpinner();
        jPanelCuerpo = new javax.swing.JPanel();
        jScrollPaneTabla = new javax.swing.JScrollPane();
        jTable = new ColorCelda(facturaControlador, celdaFacturaMap);

        setLayout(new java.awt.BorderLayout());

        jPanelCabecera.setToolTipText("");
        jPanelCabecera.setName(""); // NOI18N
        jPanelCabecera.setPreferredSize(new java.awt.Dimension(676, 74));
        jPanelCabecera.setLayout(new java.awt.GridLayout(2, 1));

        jPanelTitulo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabelTitulo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelTitulo.setText("Contabilidad Mensual");
        jPanelTitulo.add(jLabelTitulo);

        jPanelCabecera.add(jPanelTitulo);

        jPanelFiltro.setLayout(new java.awt.GridBagLayout());

        jLabelAnio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabelAnio.setText("Año Seleccionado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFiltro.add(jLabelAnio, gridBagConstraints);

        jSpinnerAnio.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jSpinnerAnio.setModel(new javax.swing.SpinnerNumberModel(2024, null, null, 1));
        jSpinnerAnio.setEditor(new javax.swing.JSpinner.NumberEditor(jSpinnerAnio, "####"));
        jSpinnerAnio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerAnioStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 25.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelFiltro.add(jSpinnerAnio, gridBagConstraints);

        jPanelCabecera.add(jPanelFiltro);

        add(jPanelCabecera, java.awt.BorderLayout.PAGE_START);

        jPanelCuerpo.setLayout(new javax.swing.BoxLayout(jPanelCuerpo, javax.swing.BoxLayout.Y_AXIS));

        jTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DNI", "Cliente", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPaneTabla.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setResizable(false);
            jTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable.getColumnModel().getColumn(2).setResizable(false);
            jTable.getColumnModel().getColumn(3).setResizable(false);
            jTable.getColumnModel().getColumn(4).setResizable(false);
            jTable.getColumnModel().getColumn(5).setResizable(false);
            jTable.getColumnModel().getColumn(6).setResizable(false);
            jTable.getColumnModel().getColumn(7).setResizable(false);
            jTable.getColumnModel().getColumn(8).setResizable(false);
            jTable.getColumnModel().getColumn(9).setResizable(false);
            jTable.getColumnModel().getColumn(10).setResizable(false);
            jTable.getColumnModel().getColumn(11).setResizable(false);
            jTable.getColumnModel().getColumn(12).setResizable(false);
            jTable.getColumnModel().getColumn(13).setResizable(false);
        }

        jPanelCuerpo.add(jScrollPaneTabla);

        add(jPanelCuerpo, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        // TODO add your handling code here:
        int row = jTable.rowAtPoint(evt.getPoint());
        int column = jTable.columnAtPoint(evt.getPoint());

        // Solo actuar si se clickea en columnas de meses (ignorar "DNI y Cliente")
        if (column > 1) {
            Map<Integer, String> columnasFactura = celdaFacturaMap.get(row);

            if (columnasFactura != null && columnasFactura.containsKey(column)) {
                String claveFactura = columnasFactura.get(column);

                if (claveFactura != null) {

                    // Extraer año y número de factura
                    String[] partesClave = claveFactura.split("_");
                    String numeroFactura = partesClave[1]; // "A/1", "A/2", etc.
                    String anioFactura = partesClave[0];  // "2024", "2023", etc.

                    //String numeroFactura = columnasFactura.get(column);
                    Factura factura = facturaControlador.leer(numeroFactura, anioFactura);

                    if (factura != null) {
                        showPopupPanel(evt.getComponent(), evt.getX(), evt.getY(), factura);
                    }
                }
            }
        }
    }//GEN-LAST:event_jTableMouseClicked

    private void jSpinnerAnioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerAnioStateChanged
        // TODO add your handling code here:
        cargarTablaContabilidad();
    }//GEN-LAST:event_jSpinnerAnioStateChanged

    private void showPopupPanel(Component parent, int x, int y, Factura factura) {
        // Crear el popup
        JPopupMenu popupMenu = new JPopupMenu();
        JPanel panel = new JPanel(new GridLayout(2, 1)); // Panel con 2 filas para los checkboxes

        JCheckBox pagadoCheckBox = new JCheckBox("Pagado");
        JCheckBox facturadoCheckBox = new JCheckBox("Facturado");

        pagadoCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 14));
        facturadoCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 14));

        // Si la Factura tiene el valor "Pagado" o "Facturado", preseleccionar los checkboxes
        pagadoCheckBox.setSelected(factura.getPagado());
        facturadoCheckBox.setSelected(factura.getFacturado());

        // Agregar checkboxes al panel
        panel.add(pagadoCheckBox);
        panel.add(facturadoCheckBox);

        // Agregar el panel al popup
        popupMenu.add(panel);

        // Añadir un botón para cerrar y guardar los cambios
        JButton guardarBtn = new JButton("Guardar");
        guardarBtn.setFont(new java.awt.Font("Segoe UI", 0, 14));

        guardarBtn.addActionListener(e -> {
            // Lógica para actualizar factura de la celda
            boolean pagado = pagadoCheckBox.isSelected();
            boolean facturado = facturadoCheckBox.isSelected();

            // Acturalizar la factura (ahora mismo solo el valor Pagado y Facturado)
            factura.setPagado(pagado);
            factura.setFacturado(facturado);

            facturaControlador.actualizar(factura);

            // Cerrar el popup
            popupMenu.setVisible(false);
        });

        // Añadir botón al popup
        popupMenu.add(guardarBtn);

        // Mostrar el popup en las coordenadas del clic
        popupMenu.show(parent, x, y);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelAnio;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JPanel jPanelCabecera;
    private javax.swing.JPanel jPanelCuerpo;
    private javax.swing.JPanel jPanelFiltro;
    private javax.swing.JPanel jPanelTitulo;
    private javax.swing.JScrollPane jScrollPaneTabla;
    private javax.swing.JSpinner jSpinnerAnio;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar() {
        cargarTablaContabilidad();
    }

    private void cargarTablaContabilidad() {

        dtm.setRowCount(0); //Limpiar la tabla
        celdaFacturaMap.clear(); // Limpiar el mapa

        List<Cliente> clientes = clienteControlador.leerTodos();

        if (clientes != null) {
            for (Cliente cliente : clientes) {
                // 1º Crear filas a todos los Clientes (vacias)
                dtm.addRow(new Object[]{
                    cliente.getDNI().trim(), // Columna DNI
                    cliente.getNombre().trim(), // Columna Nombre
                    "", // Columna Enero
                    "", // Columna Febrero
                    "", // Columna Marzo
                    "", // Columna Abril
                    "", // Columna Mayo
                    "", // Columna Junio
                    "", // Columna Julio
                    "", // Columna Agosto
                    "", // Columna Septiembre
                    "", // Columna Octubre
                    "", // Columna Diciembre
                    "" // Columna Diciembre
                });
            }

            // 2º Rellenar uno a uno las facturas de los clientes
            for (int i = 0; i < clientes.size(); i++) {   // Necesito la fila del cliente
                Cliente cliente = clientes.get(i);
                List<Factura> facturasCliente = facturaControlador.facturasCliente(cliente);    // Cojo todas las facturas del cliente

                if (facturasCliente != null) {
                    for (Factura factura : facturasCliente) {
                        String[] diaMesAnio = factura.getFecha().split("/");
                        // Hacer coincidir el Año con el spinner
                        String anio = diaMesAnio[2];
                        String spinner = (String) jSpinnerAnio.getValue().toString();
                        if (spinner.equals(anio)) {
                            // 2º hacer coincidir el Mes con la columna y poner su monto
                            String mes = diaMesAnio[1];
                            String mesTexto = convertirNumeroATextoMes(mes);
                            int columna = jTable.getColumnModel().getColumnIndex(mesTexto);

                            String claveFactura = anio + "_" + factura.getNumero();
                            // 3º Asociar celda con número de factura
                            celdaFacturaMap.computeIfAbsent(i, k -> new HashMap<>()).put(columna, claveFactura);

                            dtm.setValueAt(factura.getMonto() + sufijoPrecios, i, columna);
                        }
                    }
                }
            }

            // Ocultar la columna del DNI
            jTable.getColumnModel().getColumn(0).setMinWidth(0);
            jTable.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable.getColumnModel().getColumn(0).setPreferredWidth(0);

            rowSorter = new TableRowSorter<>(dtm);
            jTable.setRowSorter(rowSorter);
        }

    }
}
